/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package nearbyearthquakes;


import feign.Feign;
import feign.gson.GsonDecoder;
import nearbyearthquakes.api.UsgsApiConsumer;
import nearbyearthquakes.domain.Coordinates;
import nearbyearthquakes.domain.Earthquake;
import nearbyearthquakes.domain.usgs.FeatureCollection;
import nearbyearthquakes.helper.GeoDistanceHelper;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class App {


    public static void main(String[] args) {
        try {
            Scanner inputScanner = new Scanner(System.in);
            System.out.println("Enter Latitude and Longitude:");

            // Numerical input
            final double scannedLatitude = inputScanner.nextDouble();
            final double scannedLongitude = inputScanner.nextDouble();

            //get the data from usgs api
            FeatureCollection featureCollection = fetchEarthquakeDatas();

            List<Earthquake> earthquakes = dataProcessing(scannedLatitude, scannedLongitude, featureCollection);

            // Print the result to the console
            earthquakes.forEach(earthquake -> System.out.println(earthquake.toString()));

        } catch (Exception e) {
            System.out.println("The data type is not correct");
        }

    }

    /**
     * Process the fetch data
     *
     * @param scannedLatitude
     * @param scannedLongitude
     * @param featureCollection
     */
    private static List<Earthquake> dataProcessing(double scannedLatitude, double scannedLongitude, FeatureCollection featureCollection) {
        System.out.println("Nearby earthquakes to Latitude " + scannedLatitude + " and Longitude " + scannedLongitude);
        return Arrays.stream(featureCollection.getFeatures())
                // Map to domain Earthquake
                .map(feature -> {
                    final double longitude = feature.getGeometry().getCoordinates()[0];
                    final double latitude = feature.getGeometry().getCoordinates()[1];
                    final double distance = GeoDistanceHelper.getDistanceInKm(scannedLatitude, scannedLongitude, latitude, longitude);
                    return new Earthquake(feature.getProperties().getTitle(), distance, latitude, longitude);
                })
                // Filter for latitude longitude uniqueness
                .filter(distinctByKey((Coordinates::new)))
                // Order by distance
                .sorted(Comparator.comparing((Earthquake::getDistance)))
                // Get the 10 firsts data
                .limit(10)
                .collect(Collectors.toList());
    }

    /**
     * Get the earthquake datas from usgs
     *
     * @return
     */
    private static FeatureCollection fetchEarthquakeDatas() {
        UsgsApiConsumer usgsApiConsumer = Feign.builder()
                .decoder(new GsonDecoder())
                .target(UsgsApiConsumer.class, "https://earthquake.usgs.gov");

        System.out.println("Fetching data please wait");
        return usgsApiConsumer.getLast30DaysEarthquakesDatas();
    }


    public static <T> Predicate<T> distinctByKey(Function<? super T, ?> keyExtractor) {
        Map<Object, Boolean> seen = new ConcurrentHashMap<>();
        return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
    }
}
